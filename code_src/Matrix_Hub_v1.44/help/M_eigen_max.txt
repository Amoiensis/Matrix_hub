---------------------
	$ M_eigen_max $
---------------------
[Type]
<function>
	M_eigen_struct_temp* M_eigen_max(Matrix* _mat);
	|--Matrix* _mat; -> 待求最大特征值，及其对应向量的矩阵；
	----
	|--return M_eigen_struct_temp-> 该 M_eigen_struct_temp 类型变量（结构体）的地址；
	[注]（ M_eigen_struct_temp 类型，于state.h文件中定义）；
[Usage]
	M_eigen_struct_temp* M22_eigen = M_eigen_max(mat_22);
	计算 mat_22 最大特征值及对应的其特征向量；
[Details]
	|幂法|
		算法参考：https://max.book118.com/html/2017/0527/109650252.shtmv
	|函数内设置|
		MATRIX_TYPE deta = 0.001; //迭代停止条件设置；
		mat_z_gap_norm = M_norm(mat_z_gap,1); //可使用不同范数确定计算停止条件；
	
[e.g.]
<code>
	MATRIX_TYPE _mat_21[3][3] = { 1,2,3,2,1,3,3,3,5};
	int row = sizeof(_mat_21) / sizeof(_mat_21[0]);
	int column = sizeof(_mat_21[0]) / sizeof(_mat_21[0][0]);
	Matrix*  mat_21 = Matrix_gen(row,column,_mat_21);
	M_print(mat_21);
	
	M_eigen_struct_temp* M21_eigen = M_eigen_max(mat_21);
	printf(">>Eigenvalue = %lf\n",M21_eigen->eigen_value);
	printf(">>Eigen_Vector = Matrix_%x\n",M21_eigen);
	M_print(M21_eigen->eigen_matrix);
<output>
	|...
	|>>Max_Eigenvalue = 8.358739
	|>>Max_Eigen_Vector = Matrix_d01550
	|>>Matrix_d01510:
	|	0.56
	|	0.56
	|	1.00
(END)
---------------------