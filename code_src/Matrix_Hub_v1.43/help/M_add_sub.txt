---------------------
	$ M_add_sub $
---------------------
[Type]
<function>
	Matrix* M_add_sub	(MATRIX_TYPE scale_mat_subed,Matrix* _mat_subed,MATRIX_TYPE scale_mat_minus,Matrix* _mat_minus)；
	/*Add & Sub 矩阵加减法*/ 
	|--MATRIX_TYPE scale_mat_subed; -> 被减矩阵的乘数；
	|--Matrix* _mat_subed; -> 被减矩阵；
	|--MATRIX_TYPE scale_mat_subed; -> 减数矩阵的乘数；
	|--Matrix* _mat_minus; -> 减数矩阵；
	----
	|--return value-> 结果矩阵的地址；
[Usage]
	Matrix* mat_X = M_add_sub(1, mat_temp, -1, mat_step);
	（含义）return = scale_mat_subed.*_mat_subed - scale_mat_minus.* _mat_minus
	计算两矩阵（数乘后）相加减运算的矩阵，返回结果矩阵的地址；
	
[e.g.]
<code>
	//	Mat_21
	MATRIX_TYPE _mat_21[3][3] = { 0,2,3,2,1,2,4,1,3};
	row = sizeof(_mat_21) / sizeof(_mat_21[0]);
	column = sizeof(_mat_21[0]) / sizeof(_mat_21[0][0]);
	Matrix*  mat_21 = Matrix_gen(row,column,_mat_21);
	//	Mat_21b
	MATRIX_TYPE _mat_21b[3][3] = { 1,0,0,0,1,0,0,0,1};
	row = sizeof(_mat_21b) / sizeof(_mat_21b[0]);
	column = sizeof(_mat_21b[0]) / sizeof(_mat_21b[0][0]);
	//	(Mat_diff);
	Matrix*  mat_21b = Matrix_gen(row,column,_mat_21b);
	Matrix*  mat_diff = M_add_sub(1,mat_21,1,mat_21b);
	M_print(mat_diff);
<output>
	|>>Matrix_721830:
	|-1.00   2.00    3.00
	|2.00    0.00    2.00
	|4.00    1.00    2.00
(END)
---------------------