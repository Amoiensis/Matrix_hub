---------------------
	$ M_QR $
---------------------
[Type]
<function>
	Matrix ** M_QR(Matrix * _mat)
	/* QR Decomposition (create).
		矩阵QR分解 */
	|--Matrix * _x; -> 待分解矩阵；
	----
	|--Matrix** return-> 分解所得的矩阵Q 和 R；
        ｜(代码说明)
        ｜... (matrix.h)
        ｜Matrix ** M_array_Q_R = (Matrix **)malloc(sizeof(Matrix *)*2); // 保存Q/R矩阵地址
        ｜enum{q=0, r=1};
        ｜M_array_Q_R[q] = NULL;
        ｜M_array_Q_R[r] = NULL;
        ｜...
[Usage]
    Matrix ** M_Q_R = M_QR(Hilbert(5));
	1. 在项目中，使用于矩阵的QR变换中, 常常有givens变换 和 householder变换 两种,
	这里使用"householder变换" 实现；
	2. 在项目中QR分解，用于求解矩阵特征值，通常可以将矩阵进行householder变换(M_householder), 再求的特征值；

[e.g.]
<code>
    Matrix ** M_Q_R = M_QR(Hilbert(5));
    M_print(M_Q_R[0]);
    M_print(M_Q_R[1]);
    M_free(M_Q_R[0]);
    M_free(M_Q_R[1]);
    free(M_Q_R);
<output>
    >>Matrix_2178270:
    0.827	1.387	0.781	0.812	0.822
    0.413	-0.138	1.137	0.391	0.405
    0.276	-0.149	-0.182	1.007	0.265
    0.207	-0.137	-0.182	-0.304	0.860
    0.165	-0.123	-0.171	-0.286	-0.591
    >>Matrix_2178320:
    1.210	0.762	0.645	0.562	0.495
    0.000	-0.126	-0.134	-0.126	-0.115
    -0.000	0.013	-0.038	-0.040	-0.040
    -0.000	0.019	0.007	-0.016	-0.016
    0.000	0.021	0.013	0.006	-0.006

(END)
---------------------